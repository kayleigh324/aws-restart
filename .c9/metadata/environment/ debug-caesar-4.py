{"changed":true,"filter":false,"title":" debug-caesar-4.py","tooltip":"/ debug-caesar-4.py","value":"# Module Lab: Caesar Cipher Program Bug #4\n#\n# In a previous lab, you created a Caesar cipher program. This version of\n# the program is buggy. Use a debugger to find the bug and fix it.\n\n# Double the given alphabet\ndef getDoubleAlphabet(alphabet):\n    doubleAlphabet = alphabet + alphabet\n    return doubleAlphabet\n\n# Get a message to encrypt\ndef getMessage():\n    stringToEncrypt = input(\"Please enter a message to encrypt: \")\n    return stringToEncrypt\n\n# Get a cipher key\ndef getCipherKey():\n    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")\n    return shiftAmount\n\n# Encrypt message\ndef encryptMessage(message, cipherKey, alphabet):\n    encryptedMessage = \"\"\n    uppercaseMessage = \"\"\n    uppercaseMessage = message.upper()\n    for currentCharacter in uppercaseMessage:\n        position = alphabet.find(currentCharacter)\n        newPosition = position + int(cipherKey)\n        if currentCharacter in alphabet:\n            encryptedMessage = encryptedMessage + alphabet[newPosition]\n        else:\n            encryptedMessage = encryptedMessage + currentCharacter\n    return encryptedMessage\n\n# Decrypt message\ndef decryptMessage(message, cipherKey, alphabet):\n    decryptKey = -1 * int(cipherKey)\n    return encryptMessage(message, decryptKey, alphabet)\n\n# Main program logic\ndef runCaesarCipherProgram():\n    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n    print(f'Alphabet: {myAlphabet}')\n    myAlphabet2 = getDoubleAlphabet(myAlphabet)\n    print(f'Alphabet2: {myAlphabet2}')\n    myMessage = getMessage()\n    print(myMessage)\n    myCipherKey = getCipherKey()\n    print(myCipherKey)\n    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)\n    print(f'Encrypted Message: {myEncryptedMessage}')\n    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)\n    print(f'Decrypted Message: {myDecryptedMessage}')\n\n# Main logic\nrunCaesarCipherProgram()","undoManager":{"mark":4,"position":9,"stack":[[{"start":{"row":0,"column":0},"end":{"row":55,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #4","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + int(cipherKey)","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myEncryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":2}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"remove","lines":["E"],"id":3}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"remove","lines":["n"],"id":4}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"insert","lines":["D"],"id":5},{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":52,"column":32},"end":{"row":52,"column":50},"action":"remove","lines":["myDecryptedMessage"],"id":6},{"start":{"row":52,"column":32},"end":{"row":52,"column":50},"action":"insert","lines":["myDecryptedMessage"]}],[{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"remove","lines":["e"],"id":7},{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"remove","lines":["D"]}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"insert","lines":["E"],"id":8},{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"insert","lines":["n"]}],[{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"remove","lines":["n"],"id":9},{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"remove","lines":["E"]}],[{"start":{"row":52,"column":34},"end":{"row":52,"column":35},"action":"insert","lines":["D"],"id":10},{"start":{"row":52,"column":35},"end":{"row":52,"column":36},"action":"insert","lines":["e"]}],[{"start":{"row":52,"column":32},"end":{"row":52,"column":50},"action":"remove","lines":["myDecryptedMessage"],"id":11},{"start":{"row":52,"column":32},"end":{"row":52,"column":50},"action":"insert","lines":["myDecryptedMessage"]}]]},"ace":{"folds":[],"scrolltop":529.5,"scrollleft":0,"selection":{"start":{"row":52,"column":50},"end":{"row":52,"column":50},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":36,"state":"start","mode":"ace/mode/python"}},"timestamp":1647942158382}